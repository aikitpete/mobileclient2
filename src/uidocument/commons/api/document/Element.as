/* Automatically generated by IntelliJ IDEA from Java, revision needed before production use */
/*
 * Copyright (c) 2008, Vaclav Slovacek. All Rights Reserved.
 *
 * Product: UIProtocol Java
 *
 * This source-code is released under following license:
 * - no release outside i2home project is allowed
 * - this copyright notice must be placed unmodified in every file derived from this source code
 */








// @todo set id, style, position, behavior
// @todo move setProperty
// @todo REMOVE CREATE PROPERTY
package uidocument.commons.api.document {

import uidocument.commons.api.document.property.IProperty;

public class Element {

    private var id:String;
    private var style:Style;
    private var position:Position;
    private var collection:Vector.<Behavior>;
    private var properties:Property;


    public function Element(id:String):void {

        setId(id);
        setStyle(null);
        setPosition(null);
        this.collection = new Vector.<Behavior>();
        //this.properties = new Property();

    }

    /**
     * Retrieves element unique id. The id is unique in the scope of a single interface.
     *
     * @return unique id of the element in a interface
     */
    public function getId():String {
        return this.id;
    }

    ;

    /**
     * Sets id of the element.
     *
     * @param id of the element
     */
    public function setId(id:String):void {
        this.id = id;
    }

    ;

    /**
     * Gets the style of current element.
     *
     * @return style of the current element
     */
    public function getStyle():Style {
        return this.style;
    }

    ;

    /**
     * Sets style used by the component.
     *
     * @param style used by the component
     */
    public function setStyle(style:Style):void {
        this.style = style;
    }

    ;

    /**
     * Sets position of the element in parent container.
     *
     * @param position of the element in parent container
     */
    public function setPosition(position:Position):void {
        this.position = position;
    }

    ;

    /**
     * Retrieves position of the element.
     *
     * @return position of the element.
     */
    public function getPosition():Position {
        return this.position;
    }

    ;

    /**
     * Retrieves event triggers applied on the element.
     *
     * @return collection of event triggers applied on the element
     */
    public function getBehaviors():Vector.<Behavior> {
        return this.collection;
    }

    public function getBehaviorLength():Number {
        return this.collection.length;
    }

    public function getBehavior(i:Number):Behavior {
        return this.collection[i];
    }

    ;

    /**
     * Sets event for the element.
     *
     * @param behavior that should be added to the element
     */
    public function addBehavior(behavior:Behavior):void {
        if (behavior!=null) this.collection.push(behavior);
    }

    ;

    public function getProperties():Property {
        return properties;
    }

    public function setProperties(properties:Property):void {
        this.properties = properties;
    }

    public function getPropertyByName(str:String):IProperty {
        return this.properties.getPropertyByName(str);
    }

    public function toString():String {
        var ret:String = "";
        ret = "class:" + id + "\nstyle:";
        if (style != null) ret = ret + style.getModel();
        ret = ret + "\nposition:";
        if (position != null) ret = ret + position.toString();
        ret = ret + "\ncollection:\nproperties:"
        if (properties != null) ret = ret + properties.toString();
        return ret;
    }

}
}
